#include <Keypad.h>
#include <SPI.h>
#include <MFRC522.h>
#include <SD.h>
#include <SoftwareSerial.h>
#include <DFPlayer_Mini_Mp3.h>

SoftwareSerial myserial(3, 4);  // tx rx

#define RST_PIN 49
#define SS_PIN 48
#define SD_CS_PIN 8
#define RELAY 47
#define BUZZER_PIN 11
const int Exit = 46;  // Pin input exit

MFRC522 mfrc522(SS_PIN, RST_PIN);

const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  { '1', '2', '3', 'A' },
  { '4', '5', '6', 'B' },
  { '7', '8', '9', 'C' },
  { '*', '0', '#', 'D' }
};

byte rowPins[ROWS] = { 22, 24, 26, 28 };
byte colPins[COLS] = { 30, 32, 34, 36 };

Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

String uid = "";
String serial = "";
String addPassword = "1";
String deletePassword = "2468";
String inputPassword = "";
bool unlocked = false;
bool registerMode = false;
bool deleteMode = false;
String adminPin = "";  // Will be loaded from key.txt
bool editPinMode = false;

unsigned long lastMp3StartTime = 0;
int currentMp3Track = 0;
int mp3Duration = 0;

void setup() {
  Serial.begin(9600);
  pinMode(Exit, INPUT_PULLUP);
  pinMode(RELAY, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(RELAY, LOW);
  digitalWrite(BUZZER_PIN, LOW);
  SPI.begin();
  mfrc522.PCD_Init();
  mfrc522.PCD_DumpVersionToSerial();
  delay(5);
  SD.begin(SD_CS_PIN);
  while (!Serial) { ; }
  if (!SD.begin(SD_CS_PIN)) {
    Serial.println("Initialization failed!");
    return;
  }
  Serial.println("Initialization done.");
  Serial.println(F("Scan PICC to see UID, SAK, type, and data blocks..."));

  myserial.begin(9600);
  mp3_set_serial(myserial);
  mp3_set_volume(30);
  Serial3.begin(115200);
  readAdminPin();  // Load admin PIN from key.txt
}

void loop() {
  handleSerial();
  handleKeypad();
  handleRFID();
  handleMp3Playback();
  int inputState = digitalRead(Exit);  // Membaca status dari pin input
  if (inputState == LOW) {
    openDoor();
  }
}

void handleSerial() {
  if (Serial3.available()) {
    String pesanESP = "";
    while (Serial3.available()) {
      serial += char(Serial3.read());
      delay(50);
    }
    Serial.println(serial);
  }
}

void handleKeypad() {
  char key = keypad.getKey();
  if (key) {
    Serial.println(key);
    if (key == '*') {
      resetState();
    } else if (key == '9') {
      if (inputPassword == "78") {
        enterEditPinMode();
      }
      buzzerBeep(1, 50);
    } else if (key == '#') {
      if (editPinMode) {
        saveNewAdminPin();
      } else {
        checkPassword();
      }
    } else if (unlocked && registerMode && key == 'C') {
      returnToNormalMode();
      playMp3(12, 4000);
    } else if (unlocked && deleteMode && key == 'D') {
      returnToNormalMode();
      playMp3(13, 4000);
    }

    else {
      inputPassword += key;
      buzzerBeep(1, 50);
      if (inputPassword == adminPin) {  // Cek apakah password yang dimasukkan sama dengan adminPin
        Serial.println("PIN Admin dimasukkan. Membuka pintu.");
        openDoor();
        inputPassword = "";
      }
    }
  }
}
void resetState() {
  inputPassword = "";
  // unlocked = false;
  // registerMode = false;
  // deleteMode = false;
  buzzerBeep(2, 100);
}

void checkPassword() {
  // if (inputPassword == adminPin) {
  if (false) {
    // Serial.println("Admin PIN entered. Opening door.");
    // openDoor();
  } else if (inputPassword == addPassword) {
    unlocked = true;
    registerMode = true;
    deleteMode = false;
    Serial.println("Unlocked. Registration mode activated. Scan new card to register.");
    playMp3(3, 3000);
    delay(3000);
    playMp3(10, 4000);  // Memutar pesan "tekan C untuk keluar mode daftar"
  } else if (inputPassword == deletePassword) {
    unlocked = true;
    registerMode = false;
    deleteMode = true;
    Serial.println("Unlocked. Delete mode activated. Scan card to delete.");
    playMp3(2, 3000);
    delay(3000);
    playMp3(11, 4000);  // Memutar pesan "tekan D untuk keluar mode hapus"
  } else {
    buzzerBeep(3, 100);
    inputPassword = "";
  }
}

void openDoor() {
  digitalWrite(RELAY, HIGH);
  playMp3(9, 3000);  // Suara pintu terbuka
  delay(3000);
  digitalWrite(RELAY, LOW);
  inputPassword = "";
}
void enterEditPinMode() {
  editPinMode = true;
  inputPassword = "";
  Serial.println("Enter new admin PIN");
  playMp3(6, 3000);  // Suara "Masukkan PIN baru"
}
void saveNewAdminPin() {
  if (inputPassword.length() > 0) {
    adminPin = inputPassword;
    saveAdminPin();
    Serial.println("New admin PIN saved");
    playMp3(7, 2000);  // Play "New PIN saved" audio
    delay(1900);
    playMp3(14, 3000);  // Play "Invalid PIN" audio
  } else {
    Serial.println("keluar mode set PIN");
    playMp3(14, 3000);  // Play "Invalid PIN" audio
  }
  editPinMode = false;
  inputPassword = "";
}
void readAdminPin() {
  File file = SD.open("/key.txt", FILE_READ);
  if (file) {
    adminPin = file.readStringUntil('\n');
    adminPin.trim();
    file.close();
    Serial.print("Admin PIN loaded from file  ");
    Serial.println(adminPin);
  } else {
    Serial.println("Failed to open key.txt for reading. Using default PIN.");
    adminPin = "1234";  // set defailt kalo sd tidak terdetek
  }
}
void saveAdminPin() {
  SD.remove("/key.txt");  // Delete existing file
  File file = SD.open("/key.txt", FILE_WRITE);
  if (file) {
    file.println(adminPin);
    file.close();
    Serial.println("Admin PIN saved to file");
  } else {
    Serial.println("Failed to open key.txt for writing");
  }
}
void returnToNormalMode() {
  inputPassword = "";
  unlocked = false;
  registerMode = false;
  deleteMode = false;
  Serial.println("Mode Normal");
  buzzerBeep(1, 200);
}

void handleRFID() {
  if (!mfrc522.PICC_IsNewCardPresent()) {
    return;
  }
  // Select one of the cards
  if (!mfrc522.PICC_ReadCardSerial()) {
    return;
  }
  String rfid = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    rfid += String(mfrc522.uid.uidByte[i], HEX);
  }
  rfid.toUpperCase();

  Serial.print("RFID UID: ");
  Serial.print(rfid);
  if (isRFIDInLog(rfid)) {
    handleRegisteredCard(rfid);
  } else if (unlocked && registerMode) {
    registerNewCard(rfid);
  } else {
    handleUnregisteredCard(rfid);
  }
  mfrc522.PICC_HaltA();
  // }
}

void handleRegisteredCard(String rfid) {
  if (deleteMode) {
    deleteRFIDFromLog(rfid);
    Serial.println("        |     KARTU DIHAPUS DARI SD CARD");
  } else {
    Serial.println("        |     TERDAFTAR DI SD CARD / silahkan masuk");
    digitalWrite(RELAY, HIGH);
    playMp3(9, 3000);
    delay(3000);
    digitalWrite(RELAY, LOW);
  }
}

void handleUnregisteredCard(String rfid) {
  Serial.println("        |     CARD NOT REGISTERED");
  uid = rfid;
  Serial3.println(uid);
  playMp3(1, 3000);
}

void playMp3(int track, int duration) {
  mp3_play(track);
  lastMp3StartTime = millis();
  currentMp3Track = track;
  mp3Duration = duration;
}

void handleMp3Playback() {
  if (currentMp3Track != 0 && millis() - lastMp3StartTime >= mp3Duration) {
    mp3_stop();
    currentMp3Track = 0;
  }
}

bool isRFIDInLog(String rfid) {  // cek id rfid ke sd card
  File file = SD.open("/rfid_log.txt");
  if (file) {
    while (file.available()) {
      String line = file.readStringUntil('\n');
      line.trim();
      if (line.equalsIgnoreCase(rfid)) {
        file.close();
        return true;
      }
    }
    file.close();
  } else {
    Serial.println("Failed to open rfid_log.txt for reading");
  }
  return false;
}

void registerNewCard(String rfid) {  //  daftarkan kartu baru
  File file = SD.open("/rfid_log.txt", FILE_WRITE);
  if (file) {
    file.println(rfid);
    file.close();
    Serial.println("New card registered successfully");
    playMp3(5, 3000);  // kartu id berhasil disimpan
    delay(3000);
    playMp3(10, 4000);  // tekan C untuk keluar mode daftar
  } else {
    Serial.println("Failed to open rfid_log.txt for writing");
  }
}

void deleteRFIDFromLog(String rfid) {
  File file = SD.open("/rfid_log.txt", FILE_READ);
  String fileContent = "";
  bool cardFound = false;

  if (file) {
    while (file.available()) {
      String line = file.readStringUntil('\n');
      line.trim();
      if (line != rfid) {
        fileContent += line + "\n";
      } else {
        cardFound = true;
      }
    }
    file.close();

    if (cardFound) {
      SD.remove("/rfid_log.txt");
      file = SD.open("/rfid_log.txt", FILE_WRITE);
      if (file) {
        file.print(fileContent);
        file.close();
        Serial.println("  Kartu berhasil dihapus");
        // mp3_play(4);
        // delay(3000);
        // mp3_play(11);
        // delay(4000);
        // mp3_stop();
        playMp3(4, 3000);  //  kartu id berhasil dihapus
        delay(3000);
        playMp3(11, 4000);  //tekan d untuk keluar mode hapus
      } else {
        Serial.println("  Gagal membuka file untuk penulisan ulang");
      }
    } else {
      Serial.println("  Kartu tidak ditemukan dalam log");
    }
  } else {
    Serial.println("Gagal membuka file rfid_log.txt");
  }
}

void buzzerBeep(int times, int duration) {
  // Fungsi ini tetap sama seperti sebelumnya
  for (int i = 0; i < times; i++) {
    digitalWrite(BUZZER_PIN, HIGH);
    delay(duration);
    digitalWrite(BUZZER_PIN, LOW);
    delay(duration);
  }
}
